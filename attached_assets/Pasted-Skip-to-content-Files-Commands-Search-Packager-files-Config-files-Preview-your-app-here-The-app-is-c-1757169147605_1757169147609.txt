Skip to content
Files
Commands
Search
Packager files
Config files
Preview your app here
The app is currently not running.
to see the results of your app.
Chats
Archived
YouTube video info API integration
45 minutes ago
Fix get_video_details and user_client_start_handler
60 minutes ago
Fix get_video_details and user_client_start_handler
1 hour ago
Fix get_video_details and user_client_start_handler
1 hour ago
Fix get_video_details and start handler
1 hour ago
Remove Instagram implementation completely
3 hours ago
Introduce and argument stream_url that will use to stream in join_call when its not None yt_link is fallback method

Implement api based requests

import requests
import json
import time
from typing import List, Dict, Optional, Tuple
from datetime import datetime

API_TOKEN= NUB_YTDLP_API #from environment variable
BASE_URL = 'http://api.nub-coder.tech'

def get_video_info(url_or_query: str, max_results: int = 1) -> Tuple[str, str, int, str, str, int, str, str, str]:
"""Get video info - returns (title, video_id, duration, youtube_link, channel_name, views, stream_url, thumbnail, time_taken)"""
try:
response = requests.get(
f'{BASE_URL}/info',
params={'token': API_TOKEN, 'q': url_or_query, 'max_results': max_results},
timeout=30
)
response.raise_for_status()
data = response.json()

    if 'error' in data:
        return None, None, None, None, None, None, None, data.get('error')
    
    return (
        data.get('title', 'N/A'),
        data.get('video_id', 'N/A'),
        data.get('duration', 0),
        data.get('youtube_link', 'N/A'),
        data.get('channel_name', 'N/A'),
        data.get('views', 0),
        data.get('url', 'N/A'),
        data.get('thumbnail', 'N/A'),
        data.get('time_taken', 'N/A')
    )
except requests.RequestException as e:
    return None, None, None, None, None, None, None, str(e)
def search_videos(query: str, max_results: int = 5) -> List[Tuple[str, str, str, int, int, str]]:
"""Search videos - returns list of (title, video_id, channel_name, duration, views, thumbnail _url,youtube_link)"""
try:
response = requests.get(
f'{BASE_URL}/search',
params={'q': query, 'max_results': max_results},
timeout=30
)
response.raise_for_status()
data = response.json()

    if 'error' in data:
        return []
    
    results = []
    for video in data.get('results', []):
        results.append((
            video.get('title', 'N/A'),
            video.get('video_id', 'N/A'),
            video.get('channel_name', 'N/A'),
            video.get('duration', 0),
            video.get('views', 0),
            video.get('thumbnail', 'N/A'),
            video.get('youtube_link', 'N/A')
        ))
    return results
except requests.RequestException as e:
    return []
def get_rate_limit_status() -> Tuple[int, int, int, bool, str]:
"""Get quota status - returns (daily_limit, requests_used, requests_remaining, is_admin, reset_time)"""
try:
response = requests.get(
f'{BASE_URL}/rate-limit-status',
params={'token': API_TOKEN},
timeout=10
)
response.raise_for_status()
data = response.json()

    return (
        data.get('daily_limit', 0),
        data.get('requests_used', 0),
        data.get('requests_remaining', 0),
        data.get('is_admin', False),
        data.get('reset_time', 'N/A')
    )
except requests.RequestException as e:
    return 0, 0, 0, False, str(e)
Priotize to use api calls and yt-dlp request as fallback ( yt-dlp also when "NUB_YTDLP_API" is not set as environment variable)

FA

fajej75177
Assistant
45 minutes ago
I'll help you implement API-based requests with a fallback to yt-dlp and add a stream_url argument to the join_call function.

First, let me create a new API client module:

api_client.py
Now, let me update the  file to use the API with yt-dlp fallback:

tools.py
Now let me update the join_call function to accept and use the stream_url parameter:

Now let me update the play handler to use the new API and pass the stream_url:

plugins/bots.py
Now let me update the dend function and skip handlers to pass stream_url:

Finally, let me update the tools.py end function to pass stream_url:

The implementation is now complete! Here's what I've added:

API Client Module: Created  with functions to interact with the NUB API
Priority System: The system now prioritizes API calls when NUB_YTDLP_API environment variable is set, falling back to yt-dlp
Stream URL Support: Added stream_url parameter to join_call function which is used when available, with yt_link as fallback
Updated Handlers: Modified all play, skip, and queue handlers to support the new stream URL functionality
The system will:

Use API requests when the environment variable is set
Fall back to yt-dlp when API fails or token is not available
Use direct stream URLs when available for better performance
Maintain backward compatibility with existing functionality
Make sure to set the NUB_YTDLP_API environment variable in your Repl's secrets to enable API functionality.

Checkpoint made
Add API client with yt-dlp fallback and stream_url support
23 minutes ago
•
Assistant mode

advanced
Claude 4.0 Sonnet

Ask Assistant, use @ to include specific files...
New chat
New chat with Agent
Agent can make changes, review its work, and debug itself automatically.

Make anything…

Build

AI
Loading... - Replit